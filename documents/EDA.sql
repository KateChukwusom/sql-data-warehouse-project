-- Exploratory Data Analysis (EDA)

   This project contains an Exploratory Data Analysis (EDA) script designed to understand and summarize the key characteristics of a dataset before building models or drawing conclusions.
   
The analysis focuses on examining both measures (quantitative variables) and dimensions (categorical variables) to identify patterns, relationships, and potential data quality issues.

     -- Explore all objects in the database
SELECT * FROM INFORMATION_SCHEMA.TABLES

-- Explore all columns in the database
SELECT * FROM INFORMATION_SCHEMA.COLUMNS

-- Explore the dimension of the tables
SELECT DISTINCT country FROM gold.dim_customers
SELECT DISTINCT category, subcategory, product_name FROM gold.dim_product 

-- find the date of the first and last order
SELECT MIN(order_date) first_order_date,
	MAX(order_date) last_order_date,
	DATEDIFF(YEAR, min(order_date), max(order_date))as range_year
FROM gold.fact_sales1

-- find the youngest and the oldest customers
SELECT 
		MAX(birthdate) AS oldest_birthdate,
		MIN(birthdate) AS youngest_birthdate,
		DATEDIFF(year, MIN(birthdate), GETDATE()) AS oldest_age,
		DATEDIFF(year, MAX(birthdate),GETDATE()) AS youngest_age
	FROM gold.dim_customers

-- Find the total sales
SELECT SUM(sales) AS total_sales
FROM gold.fact_sales1


-- find how many items are sold
SELECT SUM(quantity) AS Total_quantity
FROM gold.fact_sales1

-- find the average selling price
SELECT 
	(SUM(sales) / SUM(quantity) ) AS Avg_selling_price
FROM gold.fact_sales1




-- find the total number of orders
SELECT 
COUNT(order_number)
FROM gold.fact_sales1

-- find the total number of products
SELECT 
COUNT(product_key)
FROM gold.dim_product1

-- find the total number of customers
SELECT 
COUNT(customer_key)
FROM gold.dim_customers


-- find the total number of customers that had placed an order
SELECT 
COUNT (DISTINCT customer_key)
FROM gold.fact_sales1 

-- Generate a report that shows all key metrics of the business

SELECT 'Total Sales' AS measure_name, SUM(sales) AS measure_value FROM gold.fact_sales1 
UNION ALL 
SELECT 'Total quantity', SUM(quantity) FROM gold.fact_sales1
UNION ALL
SELECT 'Average Price', AVG(price) FROM gold.fact_sales1
UNION ALL
SELECT 'Total Orders', COUNT(DISTINCT order_number) FROM gold.fact_sales1
UNION ALL
SELECT 'Total Products', COUNT(product_name) FROM gold.dim_product1
UNION ALL 
SELECT 'Total Customers', COUNT(customer_key) FROM gold.dim_customers

-- Magnitude Analysis
-- find total customers by countries
SELECT COUNT(customer_key) Total_customers,
country
FROM gold.dim_customers 
GROUP BY country
ORDER BY total_customers DESC

-- find total customers by gender
SELECT 
COUNT(customer_key) Total_customers,
gender
FROM gold.dim_customers
GROUP BY gender

-- find total products by category
SELECT 
category,
COUNT(product_key17) Total_product
FROM gold.dim_product1
GROUP BY category
ORDER BY Total_product DESC

-- What is the average costs in each category
SELECT 
category,
AVG(cost) average_cost
FROM gold.dim_product1
GROUP BY category
ORDER BY average_cost DESC

-- what is the total revenue generated for each category
SELECT 
p.category,
SUM(s.sales) Total_revenue
FROM gold.dim_product1 p
LEFT JOIN gold.fact_sales1 s
ON p.product_key = s.product_key 
GROUP BY p.category 
ORDER BY Total_revenue

-- what is the total revenue generated by each customer
SELECT 
c.customer_key,
SUM(s.sales) Total_revenue
FROM gold.dim_customers c
LEFT JOIN gold.fact_sales1 s
ON c.customer_key = s.customer_key
GROUP BY c.customer_key
ORDER BY Total_revenue DESC

-- what is the distribution of sold items across countries?
SELECT 
SUM(s.quantity) Total_sold_items,
c.country
FROM gold.dim_customers c
LEFT JOIN gold.fact_sales1 s
ON c.customer_key = s.customer_key 
GROUP BY c.country
ORDER BY Total_sold_items 

-- which 5 products generate the highest revenue
SELECT TOP 5
p.product_name,
SUM(s.sales) Total_revenue
FROM gold.dim_product1 p
LEFT JOIN gold.fact_sales1 s
ON p.product_key = s.product_key
GROUP BY p.product_name 
ORDER BY Total_revenue DESC

-- What are the worst performing products in terms of sales
SELECT TOP 5
p.product_name,
SUM(s.sales) Total_revenue
FROM gold.dim_product1 p
LEFT JOIN gold.fact_sales1 s
ON p.product_key = s.product_key
GROUP BY p.product_name 
ORDER BY Total_revenue 
